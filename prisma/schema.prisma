// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                Int       @id @default(autoincrement())
  email             String    @unique
  password          String
  fullname          String
  image             String?
  address           String?
  postalCode        String?
  phone             String?
  role              Role      @default(ADMIN)
  status            Status    @default(ACTIVE)
  cityId            Int
  city              City      @relation(fields: [cityId], references: [id])
  resetToken        String?
  resetTokenExpires DateTime?
  programs          Program[]
  clients           Client[]
  belongToId        Int? // Nullable field for self-relation (belonging to another user)
  belongs           User?     @relation("UserAdmin", fields: [belongToId], references: [id]) // Self-relation
  subordinates      User[]    @relation("UserAdmin") // This establishes the reverse relationship (the users who belong to this user)
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
}

model City {
  id        Int      @id @default(autoincrement())
  name      String
  countryId Int
  country   Country  @relation(fields: [countryId], references: [id])
  users     User[]
  clients   Client[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Country {
  id        Int      @id @default(autoincrement())
  name      String   @unique
  cities    City[] // This relationship allows a country to be linked to many cities
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Category {
  id          Int       @id @default(autoincrement())
  name        String    @unique
  description String?
  image       String?
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
  programs    Program[]
}

model Program {
  id          Int     @id @default(autoincrement())
  name        String  @unique
  description String?
  image       String?
  createdById Int
  createdBy   User    @relation(fields: [createdById], references: [id])
  duration    Int
  pulse       Int
  hertez      Int

  categoryId Int
  category   Category @relation(fields: [categoryId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Client {
  id         Int             @id @default(autoincrement()) // Auto-increment ID
  fullname   String
  email      String          @unique
  phone      String?
  address    String?
  postalCode String?
  image      String?
  status     Status          @default(ACTIVE)
  gender     Gender          @default(MALE)
  cityId     Int
  city       City            @relation(fields: [cityId], references: [id]) // Linking to City
  injuries   ClientInjury[] // Many-to-many with Injury lookup table
  diseases   ClientDisease[] // Many-to-many with Disease lookup table
  createdAt  DateTime        @default(now())
  updatedAt  DateTime        @updatedAt
  user       User?           @relation(fields: [userId], references: [id])
  userId     Int?
}

model Injury {
  id          Int            @id @default(autoincrement()) // Auto-increment ID
  name        String         @unique
  description String?
  clients     ClientInjury[] // Many-to-many relationship via ClientInjury table
  createdAt   DateTime       @default(now())
  updatedAt   DateTime       @default(now())
}

model Disease {
  id          Int             @id @default(autoincrement()) // Auto-increment ID
  name        String          @unique
  description String?
  clients     ClientDisease[] // Many-to-many relationship via ClientDisease table
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @default(now())
}

// Join tables for many-to-many relationships
model ClientInjury {
  clientId  Int
  injuryId  Int
  client    Client   @relation(fields: [clientId], references: [id])
  injury    Injury   @relation(fields: [injuryId], references: [id])
  createdAt DateTime @default(now())

  @@id([clientId, injuryId])
}

model ClientDisease {
  clientId  Int
  diseaseId Int
  client    Client   @relation(fields: [clientId], references: [id])
  disease   Disease  @relation(fields: [diseaseId], references: [id])
  createdAt DateTime @default(now())

  @@id([clientId, diseaseId])
}

enum Role {
  MANAGER
  ADMIN
  TRAINER
}

enum Status {
  ACTIVE
  INACTIVE
}

enum Gender {
  MALE
  FEMALE
}
